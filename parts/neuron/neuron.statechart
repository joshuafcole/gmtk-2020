BaseNeuron
    interface
        g.neuron(svg=true, class=lib.exclusive.dashed_name(Type))
            g.neuron-inner(svg=true)
                draw Axon
                draw Nucleus
                draw Terminal
                draw Pulse
                draw Motor.TransientPulse
            draw Memory.Icon
            draw Pulse.Memory.Icon
            draw Label

    Type!*
        Normal*
            on BaseNeuron.create_pulse
                add Pulse

        Motor
            on BaseNeuron.create_pulse
                add Pulse
                    @strength: event.elapsed

            TransientPulse*
                interface
                    _p: 0
                    _strength: @Nucleus.Interaction.elapsed
                    _pos: lib.neuron.axon.position(_p, BaseNeuron)
                    _deg: lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()
                    _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
                    _r: 10 + _strength / 3
                    _rx: _r * 1.2 + 4
                    _ry: _r

                    g.transient-pulse(svg=true)
                        if lib.in(Nucleus.Interaction.DragOrClick) && _strength > 0
                            ellipse.pulse.transient(svg=true, cx=_pos.x, cy=_pos.y, rx=_rx, ry=_ry, transform=_transform)

        Logic :: Normal
            @decay_rate: 0.0001
            @decay: 0
            @excitement: 0
            @theta: 0
            @base_length: 0

            on state.enter
                @theta: lib.neuron.axon.angle(BaseNeuron)
                @base_length: lib.neuron.axon.length(BaseNeuron)
                _: console.log(Math.round(@theta * 180 / lib.PI()), Math.round(@base_length))

            on BaseNeuron.pulsed
                @excitement: @excitement + 1
                @decay: 0

            on tick
                @Terminal.x: @Nucleus.x + (@base_length + @excitement) * Math.cos(@theta)
                @Terminal.y: @Nucleus.y + (@base_length + @excitement) * Math.sin(@theta)
                // @NOTE: maybe try to fuse the two --
                //        quadratically grow decay but subtract it from excitement
                // @excitement: Math.max(0, @excitement - @decay)
                @excitement: @excitement * Math.max((1 - @decay), 0)
                @decay: @decay + @decay_rate

        Memory
            @icon: ""
            @thoughts: 0

            on BaseNeuron.create_pulse
                add Pulse
                    Memory*
                        Linked: Type.Memory

            Icon*
                interface
                    foreignObject.memory-icon(svg=true, x=@Nucleus.x - 30, y=@Nucleus.y - 30)
                        i(class="fa-{{@icon}}")

            Thought[]
                @content: ""
                @ix: @thoughts

                on state.enter
                    @thoughts: @thoughts + 1


        Language
            @phoneme: ""

            on BaseNeuron.create_pulse
                add Pulse
                    Language*
                        Linked: Type.Language

            Sound*
                interface
                    audio(src="/assets/phonemes/{{@phoneme}}.mp3", -autoplay=true)
        Autonomic

    Interaction* :: Interactions.MaybeDrag
        None*
            on BaseNeuron.mouse.down (event.button == 0 && event.mod.shift) -> DragOrClick
                _bounds: lib.get_bounds(event.node)
                @off_x: event.view_x - _bounds.left
                @off_y: event.view_y - _bounds.top
        Dragging
            @nx: @Nucleus.x
            @ny: @Nucleus.y
            @tx: @Terminal.x
            @ty: @Terminal.y

            on any.mouse.move
                _dx: event.view_x - @start_x
                _dy: event.view_y - @start_y
                @Nucleus.x: @nx + _dx
                @Nucleus.y: @ny + _dy
                @Terminal.x: @tx + _dx
                @Terminal.y: @ty + _dy
    Nucleus*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.nucleus(svg=true)
                circle(svg=true, cx=@x, cy=@y, r=30)

        Interaction* :: Interactions.MaybeDrag
            @elapsed: 0
            None*
                on Nucleus.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    _bounds: lib.get_bounds(event.node)
                    @off_x: event.view_x - _bounds.left
                    @off_y: event.view_y - _bounds.top
                    @elapsed: 0
            DragOrClick
                on any.mouse.up (event.button == 0)
                    send create_pulse to BaseNeuron
                        elapsed: @elapsed

                on tick
                    @elapsed: @elapsed + 1
            Dragging
                @ox: @x
                @oy: @y
                on any.mouse.move
                    _dx: event.view_x - @start_x
                    _dy: event.view_y - @start_y
                    @x: @ox + _dx
                    @y: @oy + _dy

    Axon*
        @path: ""

        on redraw
            @path: lib.neuron.axon.path(BaseNeuron)

        interface
            g.axon(svg=true)
                path(svg=true, d=@path)

    Terminal*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.terminal(svg=true)
                circle(svg=true, cx=@x, cy=@y, r=30)

        Interaction* :: Interactions.MaybeDrag
            None*
                on Terminal.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    _bounds: lib.get_bounds(event.node)
                    @off_x: event.view_x - _bounds.left
                    @off_y: event.view_y - _bounds.top
            Dragging
                @ox: @x
                @oy: @y
                on any.mouse.move
                    _dx: event.view_x - @start_x
                    _dy: event.view_y - @start_y
                    @x: @ox + _dx
                    @y: @oy + _dy

                on any.mouse.move (lib.in(Type.Logic))
                    @Type.Logic.theta: Math.atan2(@y - @Nucleus.y, @x - @Nucleus.x)
                    @Type.Logic.base_length: Math.hypot(@y - @Nucleus.y, @x - @Nucleus.x)

    Out
        @action: ""
        @delay: 100

    Label
        @content: ""
        @p: 0
        @side: 0

        interface
            _pos: lib.neuron.axon.position(@p, BaseNeuron)
            _deg: Math.round(lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()) + 90 - @side * 180
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            g.label(svg=true)
                rect.tape(svg=true, x=_pos.x - 6, y = _pos.y - 15, width=100, height=30, transform=_transform)
                text(svg=true, x=_pos.x + 10, y=_pos.y, transform=_transform) {{@content}}

    Pulse[]
        @p: 0
        @speed: 10
        @r: lib.ternary(lib.in(BaseNeuron.Type.Memory), 15, 10)

        // Used in motor puzzles
        @strength: 1

        on tick
            @p: @p + @speed / lib.neuron.axon.length(BaseNeuron)

        // Outputs
        on tick (@p >= 1 && lib.in(BaseNeuron.Out))
            _: lib.wait(@BaseNeuron.Out.delay, @BaseNeuron.Out.action, 0, "strength", @strength)

        on tick (@p >= 1)
            _: lib.neuron.pulse.propagate(Pulse, BaseNeuron, NeuralScreen)
            send pulsed to BaseNeuron
            remove Pulse

        interface
            _pos: lib.neuron.axon.position(@p, BaseNeuron)
            _deg: lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            _r: @r + lib.ternary(lib.in(BaseNeuron.Type.Motor), @strength / 6, 0)
            _rx: _r * 1.2 + 4
            _ry: _r
            g.pulse(svg=true)
                ellipse(svg=true, cx=_pos.x, cy=_pos.y, rx=_rx, ry=_ry, transform=_transform)

        Memory
            Linked references BaseNeuron.Type.Memory

            Icon* :: BaseNeuron.Type.Memory.Icon
                interface
                    _pos: lib.neuron.axon.position(@p, BaseNeuron)
                    foreignObject.memory-icon.pulse-icon(svg=true, x=_pos.x - 15, y=_pos.y - 15)
                        i(class="fa-{{@Linked.icon}}")

        Language
            Linked references BaseNeuron.Type.Language
