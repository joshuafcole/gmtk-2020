Neuron[]
    interface
        g.neuron(svg=true)
            g.neuron-inner(svg=true)
                draw Axon
                draw Nucleus
                draw Terminal
                draw Pulse
            draw Label

    Interaction* :: Interactions.MaybeDrag
        None*
            on Neuron.mouse.down (event.button == 0 && event.mod.shift) -> DragOrClick
                view_x: event.view_x
                view_y: event.view_y
                node: event.node
        Dragging
            @nx: @Nucleus.x
            @ny: @Nucleus.y
            @tx: @Terminal.x
            @ty: @Terminal.y

            on any.mouse.move
                _dx: event.view_x - @start_x
                _dy: event.view_y - @start_y
                @Nucleus.x: @nx + _dx
                @Nucleus.y: @ny + _dy
                @Terminal.x: @tx + _dx
                @Terminal.y: @ty + _dy
    Nucleus*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.nucleus(svg=true)
                circle(svg=true, cx=@x, cy=@y, r=30)

        Interaction* :: Interactions.MaybeDrag
            None*
                on Nucleus.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    view_x: event.view_x
                    view_y: event.view_y
                    node: event.node
            DragOrClick
                on any.mouse.up (event.button == 0)
                    add Pulse
            Dragging
                on any.mouse.move
                    @x: event.view_x - @off_x
                    @y: event.view_y - @off_y

    Axon*
        @path: ""

        on redraw
            @path: lib.neuron.axon.path(Neuron)

        interface
            g.axon(svg=true)
                path(svg=true, d=@path)

    Terminal*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.terminal(svg=true)
                circle(svg=true, cx=@x, cy=@y, r=30)

        Interaction* :: Interactions.MaybeDrag
            None*
                on Terminal.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    view_x: event.view_x
                    view_y: event.view_y
                    node: event.node
            Dragging
                on any.mouse.move
                    @x: event.view_x - @off_x
                    @y: event.view_y - @off_y

    Out
        @action: ""
        @delay: 100

    Label
        @content: ""
        @p: 0
        @side: 0

        interface
            _pos: lib.neuron.axon.position(@p, Neuron)
            _deg: Math.round(lib.neuron.axon.angle(Neuron) * 180 / lib.PI()) + 90 - @side * 180
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            g.label(svg=true)
                rect.tape(svg=true, x=_pos.x - 6, y = _pos.y - 15, width=100, height=30, transform=_transform)
                text(svg=true, x=_pos.x + 10, y=_pos.y, transform=_transform) {{@content}}

    Pulse[]
        @p: 0
        @speed: 10

        on tick
            @p: @p + @speed / lib.neuron.axon.length(Neuron)

        // Outputs
        on tick (@p >= 1 && lib.in(Neuron.Out))
            _: lib.wait(@Neuron.Out.delay, @Neuron.Out.action)

        on tick (@p >= 1)
            _: lib.neuron.pulse.propagate(Pulse, Neuron, App)
            remove Pulse

        interface
            _pos: lib.neuron.axon.position(@p, Neuron)
            _deg: lib.neuron.axon.angle(Neuron) * 180 / lib.PI()
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            ellipse.pulse(svg=true, cx=_pos.x, cy=_pos.y, rx=15, ry=10, transform=_transform)
