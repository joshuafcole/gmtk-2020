BaseNeuron
    @base_size: 30

    interface
        _type: lib.exclusive.dashed_name(Type)
        _selected: lib.ternary(lib.editor.selected(BaseNeuron, Editor), "selected", "")
        g.neuron(svg=true, class="{{_type}} {{_selected}}")
            g.neuron-inner(svg=true)
                draw Axon
                draw Nucleus
                draw Terminal
                draw Pulse
                draw Motor.TransientPulse
            draw Memory.Icon
            draw Pulse.Memory.Icon
            draw Label

    Type!*
        Normal*
            @pulse_radius: @base_size / 6
            @pulse_growth: 0
            on BaseNeuron.create_pulse
                add Pulse

        Motor
            @pulse_radius: @base_size / 24
            @pulse_growth: 1 / 4
            on BaseNeuron.create_pulse
                add Pulse
                    @strength: event.elapsed

            TransientPulse*
                interface
                    _p: 0
                    _strength: @Nucleus.Interaction.elapsed
                    _pos: lib.neuron.axon.position(_p, BaseNeuron)
                    _deg: lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()
                    _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
                    _r: @pulse_radius + _strength * @pulse_growth
                    _rx: _r * 1.2
                    _ry: _r
                    g.transient-pulse(svg=true)
                        if lib.in(Nucleus.Interaction.DragOrClick) && _strength > 0
                            ellipse.pulse.transient(svg=true, cx=_pos.x, cy=_pos.y, rx=_rx, ry=_ry, transform=_transform)

            Properties* :: PropertiesBase
                @name: "Motor"
                @target: lib.editor.as_proxy(Motor)
                on state.enter
                    add Prop
                        @name: "pulse_radius"
                        @default: @base_size / 6
                    add Prop
                        @name: "pulse_growth"
                        @default: 1 / 4

        Logic :: Normal
            @decay_rate: 0.01
            @excite_rate: 3
            @decay: 0
            @excitement: 0
            @theta: 0
            @base_length: 0

            on state.enter
                @theta: lib.neuron.axon.angle(BaseNeuron)
                @base_length: lib.neuron.axon.length(BaseNeuron)
                _: console.log(Math.round(@theta * 180 / lib.PI()), Math.round(@base_length))

            on BaseNeuron.pulsed
                @excitement: @excitement + @excite_rate
                @decay: 0

            on tick
                @Terminal.x: @Nucleus.x + (@base_length + @excitement) * Math.cos(@theta)
                @Terminal.y: @Nucleus.y + (@base_length + @excitement) * Math.sin(@theta)
                // @NOTE: maybe try to fuse the two --
                //        quadratically grow decay but subtract it from excitement
                // @excitement: Math.max(0, @excitement - @decay)
                @excitement: Math.max(0, @excitement - Math.pow(@decay, 2))
                @decay: @decay + @decay_rate

            Properties* :: PropertiesBase
                @name: "Logic"
                @target: lib.editor.as_proxy(Logic)
                on state.enter
                    add Prop
                        @name: "decay_rate"
                        @default: 0.01
                    add Prop
                        @name: "excite_rate"
                        @default: 3

        Memory
            @icon: ""
            @thoughts: 0

            @pulse_radius: @base_size / 3
            @pulse_growth: 0

            on BaseNeuron.create_pulse
                add Pulse
                    Memory*
                        Linked: Type.Memory

            Icon*
                interface
                    foreignObject.memory-icon(svg=true, x=@Nucleus.x - 30, y=@Nucleus.y - 30)
                        i(class="fa-{{@icon}}")

            Thought[]
                @content: ""
                @ix: @thoughts

                on state.enter
                    @thoughts: @thoughts + 1

            Properties* :: PropertiesBase
                @name: "Memory"
                @target: lib.editor.as_proxy(Memory)
                on state.enter
                    add Prop
                        @name: "icon"
                        @type: "string"
                        @default: "leaf fas"

        Language :: Normal
            @phoneme: ""

            on BaseNeuron.create_pulse
                add Pulse
                    Language*
                        Linked: Type.Language

            Sound*
                interface
                    audio(src="/assets/phonemes/{{@phoneme}}.mp3", -autoplay=true)

            Properties* :: PropertiesBase
                @name: "Language"
                @target: lib.editor.as_proxy(Language)
                on state.enter
                    add Prop
                        @name: "phoneme"
                        @type: "string"
                        @default: "th"

        Autonomic :: Normal

    Interaction* :: Interactions.MaybeDrag
        None*
            on BaseNeuron.mouse.down (event.button == 0 && event.mod.shift) -> DragOrClick
                _bounds: lib.get_bounds(event.node)
                @off_x: event.view_x - _bounds.left
                @off_y: event.view_y - _bounds.top
        Dragging
            @nx: @Nucleus.x
            @ny: @Nucleus.y
            @tx: @Terminal.x
            @ty: @Terminal.y

            on any.mouse.move
                _dx: event.view_x - @start_x
                _dy: event.view_y - @start_y
                @Nucleus.x: @nx + _dx
                @Nucleus.y: @ny + _dy
                @Terminal.x: @tx + _dx
                @Terminal.y: @ty + _dy
    Nucleus*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.nucleus(svg=true)
                circle.halo(svg=true, cx=@x, cy=@y, r=@base_size / 2 + 10)
                circle.real(svg=true, cx=@x, cy=@y, r=@base_size / 2)

        Interaction* :: Interactions.MaybeDrag
            @elapsed: 0
            None*
                on Nucleus.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    _bounds: lib.get_bounds(event.node)
                    @off_x: event.view_x - _bounds.left
                    @off_y: event.view_y - _bounds.top
                    @elapsed: 0
            DragOrClick
                on any.mouse.up (event.button == 0)
                    send create_pulse to BaseNeuron
                        elapsed: @elapsed

                on tick
                    @elapsed: @elapsed + 1
            Dragging
                @ox: @x
                @oy: @y
                on any.mouse.move
                    _dx: event.view_x - @start_x
                    _dy: event.view_y - @start_y
                    @x: @ox + _dx
                    @y: @oy + _dy

    Axon*
        @path: ""

        on redraw
            @path: lib.neuron.axon.path(BaseNeuron, @base_size / 5)

        interface
            g.axon(svg=true)
                path(svg=true, d=@path)

    Terminal*
        @x: 0
        @y: 0

        on (lib.changed(@x, @y))
            send redraw to Axon

        interface
            g.terminal(svg=true)
                circle.halo(svg=true, cx=@x, cy=@y, r=@base_size / 2 + 10)
                circle.real(svg=true, cx=@x, cy=@y, r=@base_size / 2)

        Interaction* :: Interactions.MaybeDrag
            None*
                on Terminal.mouse.down (event.button == 0 && !event.mod.shift) -> DragOrClick
                    _bounds: lib.get_bounds(event.node)
                    @off_x: event.view_x - _bounds.left
                    @off_y: event.view_y - _bounds.top
            Dragging
                @ox: @x
                @oy: @y
                on any.mouse.move
                    _dx: event.view_x - @start_x
                    _dy: event.view_y - @start_y
                    @x: @ox + _dx
                    @y: @oy + _dy

                on any.mouse.move (lib.in(Type.Logic))
                    @Type.Logic.theta: Math.atan2(@y - @Nucleus.y, @x - @Nucleus.x)
                    @Type.Logic.base_length: Math.hypot(@y - @Nucleus.y, @x - @Nucleus.x)

    Out
        @action: ""
        @delay: 100

        Properties* :: PropertiesBase
            @name: "Out"
            @target: lib.editor.as_proxy(Out)
            on state.enter
                add Prop
                    @name: "action"
                    @type: "string"
                    @default: "do_something"
                add Prop
                    @name: "delay"
                    @type: "number"
                    @default: 100

            Removable*
                on remove
                    remove Out

    Label
        @content: ""
        @p: 0
        @side: 0

        interface
            _pos: lib.neuron.axon.position(@p, BaseNeuron)
            _deg: Math.round(lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()) + 90 - @side * 180
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            g.label(svg=true)
                rect.tape(svg=true, x=_pos.x - 6, y = _pos.y - 15, width=100, height=30, transform=_transform)
                text(svg=true, x=_pos.x + 10, y=_pos.y, transform=_transform) {{@content}}

        Properties* :: PropertiesBase
            @name: "Label"
            @target: lib.editor.as_proxy(Label)
            on state.enter
                add Prop
                    @name: "content"
                    @type: "string"
                    @default: "label me"
                add Prop
                    @name: "p"
                    @type: "number"
                    @default: 0.33
                add Prop
                    @name: "side"
                    @type: "number"
                    @default: 0

            Removable*
                on remove
                    remove Label

    Pulse[]
        @p: 0
        @speed: 5
        @r: lib.exclusive.get(BaseNeuron.Type, "pulse_radius")

        // Used in motor puzzles
        @strength: 1

        on tick
            @p: @p + @speed / lib.neuron.axon.length(BaseNeuron)

        // Outputs
        on tick (@p >= 1 && lib.in(BaseNeuron.Out))
            _: lib.wait(@BaseNeuron.Out.delay, @BaseNeuron.Out.action, 0, "strength", @strength)

        on tick (@p >= 1)
            _: lib.neuron.pulse.propagate(Pulse, BaseNeuron, NeuralScreen)
            send pulsed to BaseNeuron
            remove Pulse

        interface
            _pos: lib.neuron.axon.position(@p, BaseNeuron)
            _deg: lib.neuron.axon.angle(BaseNeuron) * 180 / lib.PI()
            _transform: "rotate({{_deg}}, {{_pos.x}}, {{_pos.y}})"
            _r: @r + @strength * lib.exclusive.get(BaseNeuron.Type, "pulse_growth")
            _rx: _r * 1.2
            _ry: _r
            g.pulse(svg=true)
                ellipse(svg=true, cx=_pos.x, cy=_pos.y, rx=_rx, ry=_ry, transform=_transform)

        Memory
            Linked references BaseNeuron.Type.Memory

            Icon* :: BaseNeuron.Type.Memory.Icon
                interface
                    _pos: lib.neuron.axon.position(@p, BaseNeuron)
                    foreignObject.memory-icon.pulse-icon(svg=true, x=_pos.x - 15, y=_pos.y - 15)
                        i(class="fa-{{@Linked.icon}}")

        Language
            Linked references BaseNeuron.Type.Language




PropertiesBase
    @name: "Properties"
    @class: ""
    @target: lib.editor.as_proxy(Motor)

    interface
        property-grid(class=@class)
            h3 {{@name}}
                spacer
                draw Removable
            draw Prop

    Removable
        interface
            button.remove(click="remove")
                i.fas.fa-times

    Prop[]
        @name: "prop_name"
        @type: "number"
        @default: ""

        State!*
            Normal*
                on Prop.focused -> Editing

            Editing
                @value: ""

                on Prop.changed
                    @value: event.value

                on Prop.blurred -> Normal
                    _: lib.editor.set_prop(@target, @name, @value, @type)

                on Prop.keyboard.down (event.key == "Enter")
                    _: lib.editor.set_prop(@target, @name, @value, @type)
                    _: lib.call(event.prevent)

        interface
            label
                name {{@name}}
                value(contentEditable=true, placeholder=@default, input="changed", focus="focused", blur="blurred") {{lib.editor.get_prop(@target, @name)}}
