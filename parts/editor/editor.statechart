Editor*
    interface
        editor(class=lib.exclusive.dashed_name(State))
            draw State.Enabled

    State!*
        Disabled*
            on any.keyboard.down (event.mod.alt && event.key == "E") -> Enabled
        Enabled
            on any.keyboard.down (event.mod.alt && event.key == "E") -> Disabled

            Tool!*
                on any.keyboard.down (event.key == "n") -> Normal
                on any.keyboard.down (event.key == "m") -> Motor
                on any.keyboard.down (event.key == "l") -> Logic
                on any.keyboard.down (event.key == "p") -> Language
                on any.keyboard.down (event.key == "t") -> Memory
                on any.keyboard.down (event.key == "f") -> Flag

                interface
                    tool-wrapper
                        draw Add
                        draw Flag

                Add!*
                    Normal*
                        interface
                            i.fas.fa-code-branch.tool-icon
                    Motor
                        interface
                            i.fas.fa-cogs.tool-icon
                    Logic
                        interface
                            i.fas.fa-magic.tool-icon
                    Language
                        interface
                            i.far.fa-comment-dots.tool-icon
                    Memory
                        interface
                            i.fas.fa-brain.tool-icon

                Flag
                    interface
                        i.fas.fa-flag.tool-icon


            Interaction!*
                None*
                    on NeuralScreen.mouse.down (event.button == 0 && lib.in(Tool.Add)) -> Adding
                        add Neuron (_n)
                            Nucleus*
                                @x: event.view_x
                                @y: event.view_y
                            Terminal*
                                @x: event.view_x
                                @y: event.view_y

                        reference _n in AddingNeuron
                        _: lib.editor.convert_to(Neuron, Enabled.Tool.Add)

                    on Neuron.Label.mouse.down (event.button == 0 && !event.mod.shift && lib.in(Tool.Flag) && lib.in(Neuron.Label))
                        _p: lib.editor.compute_p(Neuron, event.view_x, event.view_y)
                        _: lib.editor.move_label(Neuron, _p)

                    on Neuron.Label.mouse.down (event.button == 0 && event.mod.shift && lib.in(Tool.Flag) && lib.in(Neuron.Label))
                        remove Neuron.Label

                    on NeuralScreen.Neuron.mouse.down (event.button == 0 && lib.in(Tool.Flag) && !lib.in(Neuron.Label))
                        _p: lib.editor.compute_p(Neuron, event.view_x, event.view_y)
                        _: lib.editor.label(Neuron, "unlabeled", _p)

                Adding
                    AddingNeuron references NeuralScreen.Neuron

                    on any.mouse.down (event.button == 0) -> None
                        dereference AddingNeuron in AddingNeuron

                    on any.mouse.move
                        @AddingNeuron.Terminal.x: event.view_x
                        @AddingNeuron.Terminal.y: event.view_y

                    on any.mouse.move (lib.in(AddingNeuron.Type.Logic))
                        _x2: @AddingNeuron.Terminal.x
                        _y2: @AddingNeuron.Terminal.y
                        _x1: @AddingNeuron.Nucleus.x
                        _y1: @AddingNeuron.Nucleus.y
                        @AddingNeuron.Type.Logic.theta: Math.atan2(_y2 - _y1, _x2 - _x1)
                        @AddingNeuron.Type.Logic.base_length: Math.hypot(_y2 - _y1, _x2 - _x1)

                    on NeuralScreen.mouse.RMB -> None
                        remove AddingNeuron
                        dereference AddingNeuron in AddingNeuron

            interface
                editor-content
                    editing-notice
                        i.fas.fa-edit
                        draw Tool
