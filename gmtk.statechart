import "./parts/std/std.statechart"

App*
    on state.enter
        _: lib.start_ticking()

        add NeuralScreen
            @name: "Motor"

            Neuron
                Nucleus*
                    @x: 50
                    @y: 200
                Terminal*
                    @x: 800
                    @y: 50

                Type!*
                    Motor*

            Neuron
                Nucleus*
                    @x: 400
                    @y: 425
                Terminal*
                    @x: 100
                    @y: 600

                Type!*
                    Motor*

                Out*
                    @action: "move_leg"
                    @delay: 500

                Label*
                    @content: "leg"
                    @p: 0.25
                    @side: 1

        add NeuralScreen
            @name: "Logic"

            Neuron
                Nucleus*
                    @x: 950
                    @y: 400
                Terminal*
                    @x: 1050
                    @y: 550

                Type!*
                    Logic*

            Neuron
                Nucleus*
                    @x: 1100
                    @y: 650
                Terminal*
                    @x: 700
                    @y: 650

            Neuron
                Nucleus*
                    @x: 750
                    @y: 550
                Terminal*
                    @x: 850
                    @y: 400


        add NeuralScreen
            @name: "Language"

            Neuron
                Nucleus*
                    @x: 575
                    @y: 425
                Terminal*
                    @x: 650
                    @y: 800

                Type!*
                    Language*
                        @phoneme: "th"

                    Label*
                        @content: "'TH'"
                        @p: 0.33
                        @side: 1

        add NeuralScreen
            @name: "Memory"

            Neuron
                Nucleus*
                    @x: 300
                    @y: 300
                Terminal*
                    @x: 325
                    @y: 350

                Type!*
                    Memory*
                        @icon: "cog fas"

                        Thought
                            @content: "I wonder how many gears Big Ben contains..."

            Neuron
                Nucleus*
                    @x: 750
                    @y: 125
                Terminal*
                    @x: 500
                    @y: 400

                Type!*
                    Memory*
                        @icon: "feather fas"
                        Thought
                            @content: "Is a ton of feathers really not lighter than a ton of bricks?"
                        Thought
                            @content: "I mean, it makes sense, but..."

        _: lib.editor.load_all(App)

    interface
        app
            control-room-background
                img.control-room(src="./assets/control-room.svg")
            screen-layer
                draw NeuralScreen


    import "./parts/neuron/neuron.statechart"
    import "./parts/scene/scene.statechart"

    NeuralScreen[]
        @name: ""
        interface
            _view: lib.exclusive.dashed_name(View)
            neural-screen-wrapper(class="{{_view}} {{@name}}")
                neural-screen-placeholder
                    h3 {{@name}}
                neural-screen-inner
                    svg.neural-screen(svg=true, postRender=lib.resize_svg, w=1000, h=900)
                        draw Neuron

        View!*
            Mini*
                on NeuralScreen.mouse.click -> Focused

            Focused
                on NeuralScreen.mouse.RMB (!lib.in(Editor.State.Enabled.Interaction.Adding)) -> Mini

        Neuron[] :: BaseNeuron

SVGDefs*
    interface
        svg.defs(svg=true, style="width: 0; height: 0")
            draw GooFilter
            draw GlowFilter

    GooFilter*
        interface
            filter(svg=true, id="goo")
                feGaussianBlur(svg=true, in="SourceGraphic", stdDeviation="10", result="blur")
                feColorMatrix(svg=true, in="blur", type="matrix", values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7", result="goo")
                feBlend(svg=true, in="goo", in2="SourceGraphic")

    GlowFilter[1]
        @color: "FFFFFF"
        bind @matrix: lib.color_to_matrix(@color)

        interface
            filter(svg=true, id="glow-{{@color}}")
                    feColorMatrix(svg=true, type="matrix", values=@matrix)
                    feGaussianBlur(svg=true, stdDeviation=6, result="colored_blur")
                    feMerge(svg=true)
                        feMergeNode(svg=true, in="colored_blur")
                        feMergeNode(svg=true, in="SourceGraphic")

import "./parts/editor/editor.statechart"
