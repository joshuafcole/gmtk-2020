import "./parts/std/std.statechart"

App*
    @active_scene: ""

    on state.enter
        _: lib.start_ticking()

    on think_sub
        send think
            idea: event.memory.idea
            memory: event.memory

    interface
        app
            control-room-background
                img.control-room(src="./assets/control-room.svg")
            screen-layer
                draw NeuralScreen
            scene-layer
                draw SceneWrapper
            dialog-layer
                draw Dialog

    import "./parts/neuron/neuron.statechart"
    import "./parts/dialog/dialog.statechart"
    import "./parts/scene/scene.statechart"

    NeuralScreen[]
        @name: ""

        interface
            _view: lib.exclusive.dashed_name(View)
            _flash: lib.ternary(lib.in(Flash.On), "flashing", "")
            neural-screen-wrapper(class="{{_view}} {{@name}} {{_flash}}")
                // img.neural-screen-panel(src="./assets/control-panel.svg")
                neural-screen-placeholder
                    h3 {{@name}}
                neural-screen-inner
                    svg.neural-screen(svg=true, postRender=lib.resize_svg, w=1000, h=900)
                        draw Neuron
                    task-layer
                        draw NeuralScreen.MotorTask

                    draw Focused.BackButton

        Flash* :: FlasherBase
            Off*
                on flash (event.screen == @name) -> On

        View!*
            Mini*
                on NeuralScreen.mouse.click -> Focused

            Focused
                on state.enter
                    send close_other_screens
                        @from: NeuralScreen
                    send open
                        @screen: NeuralScreen.name

                on close_other_screens (!lib.is(event.from, NeuralScreen)) -> Mini

                on NeuralScreen.mouse.RMB (!lib.in(Editor.State.Enabled.Interaction.Adding)) -> Mini

                BackButton*
                    on mouse.click -> Mini

                    interface
                        back-button
                            i.fas.fa-angle-double-left


        Neuron[] :: BaseNeuron


        MotorTask[]
            @elapsed: 0
            @viewport: 5

            on tick
                @elapsed: @elapsed + 1 / 60

            Step[]
                // body part / action
                @part: "leg_left"
                // seconds
                @by: 20

                // pulse strength
                @min: 1
                @max: 20


                Incomplete*
                    on use (event.part == @part && event.strength < @min) -> Complete
                        _: console.log("UNDER")
                        send motor_step_under
                    on use (event.part == @part && event.strength > @max) -> Complete
                        _: console.log("OVER")
                        send motor_step_over
                    on use (event.part == @part && @min < event.strength && event.strength < @max) -> Complete
                        _: console.log("SUCCESS")
                        send motor_step_success

                    on tick (@elapsed > @by) -> Complete
                        _: console.log("TIMEOUT")
                        send motor_step_timeout

                Complete
                    on tick (@elapsed > @by + @viewport * 0.05)
                        remove Step

                interface
                    motor-task-step(style="--by: {{@by}}; --vp: {{@viewport}};")
                        {{@part}}

            interface
                motor-task(style="--elapsed: {{@elapsed}}")
                    draw Step

    MotorScreen references NeuralScreen
    LogicScreen references NeuralScreen
    LanguageScreen references NeuralScreen
    MemoryScreen references NeuralScreen


SVGDefs*
    on state.enter
        add GlowFilter
            @color: "FF0000"

    interface
        svg.defs(svg=true, style="width: 0; height: 0")
            draw GooFilter
            draw GlowFilter

    GooFilter*
        interface
            filter(svg=true, id="goo")
                feGaussianBlur(svg=true, in="SourceGraphic", stdDeviation="5", result="blur")
                feColorMatrix(svg=true, in="blur", type="matrix", values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7", result="goo")
                feBlend(svg=true, in="goo", in2="SourceGraphic")

    GlowFilter[1]
        @color: "FFFFFF"
        bind @matrix: lib.color_to_matrix(@color)

        interface
            filter(svg=true, id="glow-{{@color}}")
                    feColorMatrix(svg=true, type="matrix", values=@matrix)
                    feGaussianBlur(svg=true, stdDeviation=6, result="colored_blur")
                    feMerge(svg=true)
                        feMergeNode(svg=true, in="colored_blur")
                        feMergeNode(svg=true, in="SourceGraphic")

import "./parts/editor/editor.statechart"
