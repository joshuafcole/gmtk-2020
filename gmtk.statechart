import "./parts/std/std.statechart"

App*
    on state.enter
        _: lib.start_ticking()

        add NeuralScreen
            @name: "Motor"
        add NeuralScreen
            @name: "Logic"
        add NeuralScreen
            @name: "Language"
        add NeuralScreen
            @name: "Memory"

        _: lib.editor.load_all(App)

    on think_sub
        send think
            idea: event.memory.idea
            memory: event.memory

    interface
        app
            control-room-background
                img.control-room(src="./assets/control-room.svg")
            screen-layer
                draw NeuralScreen
            scene-layer
                draw SceneWrapper
            dialog-layer
                draw Dialog

    import "./parts/neuron/neuron.statechart"
    import "./parts/scene/scene.statechart"
    import "./parts/dialog/dialog.statechart"

    NeuralScreen[]
        @name: ""

        on flash (event.screen == @name) -> Flash


        interface
            _view: lib.exclusive.dashed_name(View)
            _flash: lib.ternary(lib.in(Flash), "flashing", "")
            neural-screen-wrapper(class="{{_view}} {{@name}} {{_flash}}")
                // img.neural-screen-panel(src="./assets/control-panel.svg")
                neural-screen-placeholder
                    h3 {{@name}}
                neural-screen-inner
                    svg.neural-screen(svg=true, postRender=lib.resize_svg, w=1000, h=900)
                        draw Neuron

        Flash
            on state.enter
                _: lib.wait(2000, "stop_flashing", Flash)

            on stop_flashing -> NeuralScreen

        View!*
            Mini*
                on NeuralScreen.mouse.click -> Focused

            Focused
                on state.enter
                    send close_other_screens
                        @from: NeuralScreen
                    send open
                        @screen: NeuralScreen.name

                on close_other_screens (!lib.is(event.from, NeuralScreen)) -> Mini

                on NeuralScreen.mouse.RMB (!lib.in(Editor.State.Enabled.Interaction.Adding)) -> Mini

        Neuron[] :: BaseNeuron

SVGDefs*
    on state.enter
        add GlowFilter
            @color: "FF0000"

    interface
        svg.defs(svg=true, style="width: 0; height: 0")
            draw GooFilter
            draw GlowFilter

    GooFilter*
        interface
            filter(svg=true, id="goo")
                feGaussianBlur(svg=true, in="SourceGraphic", stdDeviation="5", result="blur")
                feColorMatrix(svg=true, in="blur", type="matrix", values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7", result="goo")
                feBlend(svg=true, in="goo", in2="SourceGraphic")

    GlowFilter[1]
        @color: "FFFFFF"
        bind @matrix: lib.color_to_matrix(@color)

        interface
            filter(svg=true, id="glow-{{@color}}")
                    feColorMatrix(svg=true, type="matrix", values=@matrix)
                    feGaussianBlur(svg=true, stdDeviation=6, result="colored_blur")
                    feMerge(svg=true)
                        feMergeNode(svg=true, in="colored_blur")
                        feMergeNode(svg=true, in="SourceGraphic")

import "./parts/editor/editor.statechart"
